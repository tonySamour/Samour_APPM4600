import numpy as np
import matplotlib.pyplot as plt

# Problem 5a

x1 = 10**5
x2 = 10**4
y = x1 - x2

delx1 = 0.000005
delx2 = 0.000003

x1pert = x1 + delx1
x2pert = x2 + delx2

dely = delx1 - delx2

ypert = y + dely

absError = abs(dely-y)
relError = abs(dely-y)/abs(y)

print ("This is the absolute error: ", absError)
print ("This is the relative error: ", relError)

# After experimenting with different numbers, I have found that using extreme values
# yields larger difference in relative vs
# absolute errors.

# Problem 5b

x3 = np.pi
x4 = 10**6
delx = np.array([10**(-16),10**(-15),10**(-14),10**(-13), 10**(-12), 10**(-11), 10**(-10), 10**(-9), 10**(-8), 10**(-7), 10**(-6), 10**(-5), 10**(-4), 10**(-3), 10**(-2), 10**(-1), 1])

z = (np.cos(x3)*np.cos(delx) - np.sin(x3)*np.sin(delx)) - np.cos(x3)
z2 = (np.cos(x4)*np.cos(delx) - np.sin(x4)*np.sin(delx)) - np.cos(x4)

plt.semilogx(delx, z)
plt.semilogx(delx, z2)
plt.xlabel('x')
plt.ylabel('y')
plt.show()